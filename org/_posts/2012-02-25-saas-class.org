#+TITLE:     Software as a Service class
#+AUTHOR:    Anirudh Saraf
#+EMAIL:     anirudhsaraf@gmail.com
#+DATE:      2011-10-13 Thu
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:3 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+BEGIN_HTML
---
layout: post
title: Personal notes for coursera's SaaS class
tags: software,design, lecture notes
---
#+END_HTML

I am following coursera's [[https://www.coursera.org/saas/class/index][saas-class]]  online, and using this post for
keeping track of progress/notes/links etc. These notes are very rough,
mostly a personal log of progress...

* Lecture notes
** Engineering Software is Different from Engineering Hardware (02/25)
*** Legacy code: old SW meet customer's needs, but difficult to evolve due to design elegance
*** Waterfall vs Agile
    - Requirements analysis and specification
    - Architectural design
    - Implementation
    - Verfication
    - Operations and Maintenance
    - Works well for important software with specs
    - Plan to throw one away - you are going to anyway ;)
    - If a problem has no solution, it may not be a problem, but a
      fact, not to be solved, but to be coped with over time.(Peres's Law)
    - Individuals and interactions over processes & tools
    - Working software over comprehensive documentation
    - Customer collaboration over contract negotiation
    - Responding to change over following a plan
    - Embrace change as a fact of life
*** Assurance
    - Verification - Did you build the thing *right*
    - Validation - Did you build the *right* thing
    - Testing - Exhaustive testing infeasible
    - Use Automation, Coverage, Regression testing, Integration
      testing, Test Driven Design
*** Productivity
    - Clarity via conciseness
      + Syntax: short and easier to read
      + Raise the level of abstraction
    - Synthesis
      + Automatic code generation
    - Reuse
      + Procedures and functions
      + Standardized Libraries
      + OOP
      + Design Patterns
    - Automation and tools
      + Replace tedious manual tasks with automation to save time,
        improve accuracy
      + Concerns (Dependability/ UI)
      + IMPORTANT SKILL - LEARN NEW TOOLS ALL THE TIME
*** Sotware as a service
    - SaaS delivers SW & data as a service
    - No install worries
    - No data loss
    - Easy for groups to interact with same data
    - No compatibility hassles for developers
    - 1 copy - easier upgrades/features
*** SOA
    - SW architecture where all components are designed to be services
    - Apps composed of interoperable services
    - [[http://news.ycombinator.com/item?id=3101876][Steve Yeggi - SOA rant]]
*** Cloud computing, fallacies, pitfalls
    - Communication 
    - Scalability
    - Dependability
    - Cluster - commodity hardware
    - Utility Computing / Public Cloud Computing
    - AWS - 42nd fastest computer in the world @ $700/hr!
** SaaS Architecture
*** Web as a Client-Server System; TCP/IP Intro
    - Internet: request/reply oriented
    - Client/Server v-s Peer-to-Peer(bittorrent) architecture
    - Localhost - 127.0.0.1
    - IP - no-gaurantee, best-effort service
    - TCP - makes IP reliable by detecting "dropped" packets
    - TCP ports allow multiple TCP apps on same computer
    - DNS - maps names to IP addresses
    - HTTP - ASCII based request/reply protocol
    - Protocol versions & status code; Response Header and Response Body
    - nc -l <portnumber>
    - HTTP is stateless! Cookies to the rescue
    - Per-user state: customization/ click tracking etc.
*** 3-tiered Shared-Nothing Architecture and Scaling
    - map URI to correct function
    - pass arguments etc.
    - invoke program on server/storage etc.
    - Presentation layer/ App Layer/ Database layer
    - Developer environment vs medium-scale deployment vs
      large-scale deployment
    - Sharding v/s Replicate data
*** Model-View-Controller Architecture
    - separate organization of data (Model) with presentation(UI)
      using a controller
    - View 'indirectly' interacts with Model
    - Each entity has a model, controller & set of views
    - Establishing connections between different views?
    - Models often talk to each other!
    - Alternatives
      - Page Controller  <Each view has a controller>
      - Front Controller <One Controller>
      - Template View (PHP) <No controller - embeded PHP>
*** Models, Databases and ActiveRecord
    - How to represent persisted object in storage
    - In-Memory vs In-Storage?
    - CRUD -> serialize / deserealize
    - ActiveRecord : every model knows how to CRUD itself
    - Rails Models store data in RDBMS
    - Each model in its own table, each row is an instance of the model
    - Alternative: DataMapper -> each model defines its own
      CRUD. Google App Engine. No RDMS -> easier to scale?. Difficult
      to map relationships without models
*** Controllers, Routes and RESTfulness
    - Route maps <HTTP request, URI> to controlloer action
    - Rails routing:
      + Map URI -> method
      + Easily create <URI> calls
      + Parse parameters passed to URI
      + CRUD routes
      + REST (Representation State Transfer)
      + Each URI has all the information it needs to render its view
*** Templates, Views and HAML
    - Views -> markup with interpolation
    - Template View Pattern: HAML + closure
    - Alternate: Transform View pattern
    - You can put code in view, but you shouldn't. HAML makes it
      intentionally awkward.
* Web Links
** [[http://beta.saasbook.info/]]
