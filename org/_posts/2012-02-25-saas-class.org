#+TITLE:     Software as a Service class
#+AUTHOR:    Anirudh Saraf
#+EMAIL:     anirudhsaraf@gmail.com
#+DATE:      2011-10-13 Thu
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:3 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+BEGIN_HTML
---
layout: post
title: Personal notes for coursera's SaaS class
tags: software,design, lecture notes
---
#+END_HTML

I am following coursera's [[https://www.coursera.org/saas/class/index][saas-class]]  online, and using this post for
keeping track of progress/notes/links etc. These notes are very rough,
mostly a personal log of progress...

* Lecture notes
** Engineering Software is Different from Engineering Hardware (02/25)
*** Legacy code: old SW meet customer's needs, but difficult to evolve due to design elegance
*** Waterfall vs Agile
    - Requirements analysis and specification
    - Architectural design
    - Implementation
    - Verfication
    - Operations and Maintenance
    - Works well for important software with specs
    - Plan to throw one away - you are going to anyway ;)
    - If a problem has no solution, it may not be a problem, but a
      fact, not to be solved, but to be coped with over time.(Peres's Law)
    - Individuals and interactions over processes & tools
    - Working software over comprehensive documentation
    - Customer collaboration over contract negotiation
    - Responding to change over following a plan
    - Embrace change as a fact of life
*** Assurance
    - Verification - Did you build the thing *right*
    - Validation - Did you build the *right* thing
    - Testing - Exhaustive testing infeasible
    - Use Automation, Coverage, Regression testing, Integration
      testing, Test Driven Design
*** Productivity
    - Clarity via conciseness
      + Syntax: short and easier to read
      + Raise the level of abstraction
    - Synthesis
      + Automatic code generation
    - Reuse
      + Procedures and functions
      + Standardized Libraries
      + OOP
      + Design Patterns
    - Automation and tools
      + Replace tedious manual tasks with automation to save time,
        improve accuracy
      + Concerns (Dependability/ UI)
      + IMPORTANT SKILL - LEARN NEW TOOLS ALL THE TIME
*** Sotware as a service
    - SaaS delivers SW & data as a service
    - No install worries
    - No data loss
    - Easy for groups to interact with same data
    - No compatibility hassles for developers
    - 1 copy - easier upgrades/features
*** SOA
    - SW architecture where all components are designed to be services
    - Apps composed of interoperable services
    - [[http://news.ycombinator.com/item?id=3101876][Steve Yeggi - SOA rant]]
*** Cloud computing, fallacies, pitfalls
    - Communication 
    - Scalability
    - Dependability
    - Cluster - commodity hardware
    - Utility Computing / Public Cloud Computing
    - AWS - 42nd fastest computer in the world @ $700/hr!
** SaaS Architecture
*** Web as a Client-Server System; TCP/IP Intro
    - Internet: request/reply oriented
    - Client/Server v-s Peer-to-Peer(bittorrent) architecture
    - Localhost - 127.0.0.1
    - IP - no-gaurantee, best-effort service
    - TCP - makes IP reliable by detecting "dropped" packets
    - TCP ports allow multiple TCP apps on same computer
    - DNS - maps names to IP addresses
    - HTTP - ASCII based request/reply protocol
    - Protocol versions & status code; Response Header and Response Body
    - nc -l <portnumber>
    - HTTP is stateless! Cookies to the rescue
    - Per-user state: customization/ click tracking etc.
*** 3-tiered Shared-Nothing Architecture and Scaling
    - map URI to correct function
    - pass arguments etc.
    - invoke program on server/storage etc.
    - Presentation layer/ App Layer/ Database layer
    - Developer environment vs medium-scale deployment vs
      large-scale deployment
    - Sharding v/s Replicate data
*** Model-View-Controller Architecture
    - separate organization of data (Model) with presentation(UI)
      using a controller
    - View 'indirectly' interacts with Model
    - Each entity has a model, controller & set of views
    - Establishing connections between different views?
    - Models often talk to each other!
    - Alternatives
      - Page Controller  <Each view has a controller>
      - Front Controller <One Controller>
      - Template View (PHP) <No controller - embeded PHP>
*** Models, Databases and ActiveRecord
    - How to represent persisted object in storage
    - In-Memory vs In-Storage?
    - CRUD -> serialize / deserealize
    - ActiveRecord : every model knows how to CRUD itself
    - Rails Models store data in RDBMS
    - Each model in its own table, each row is an instance of the model
    - Alternative: DataMapper -> each model defines its own
      CRUD. Google App Engine. No RDMS -> easier to scale?. Difficult
      to map relationships without models
*** Controllers, Routes and RESTfulness
    - Route maps <HTTP request, URI> to controlloer action
    - Rails routing:
      + Map URI -> method
      + Easily create <URI> calls
      + Parse parameters passed to URI
      + CRUD routes
      + REST (Representation State Transfer)
      + Each URI has all the information it needs to render its view
*** Templates, Views and HAML
    - Views -> markup with interpolation
    - Template View Pattern: HAML + closure
    - Alternate: Transform View pattern
    - You can put code in view, but you shouldn't. HAML makes it
      intentionally awkward.

** Ruby and Rails Basics
*** Ruby 101
    - Interpreted
    - Object-Oriented
      - Every operation is a method call
    - Dynamically types - objects have types but variables don't
    - Dynamic
      - add, modify code at runtime
      - reflection
    - Naming conventions
      - ClassNames
      - methods & variables use snake_case (?!)
      - CONSTANTS(scoped) & $GLOBALS
      - symbols: immutable string whose value is itsemlf
	- :rails.to_s == "rails"
	  "rails".to_sym == :rails
	  :rails == "rails" => false
	- A symbol specifices that it is one of a fixed set of
          strings, and not a random string
      - There are no declarations
	- local variables myst be assigned before use
	- instance & class variables ==nil until assigned
	- OK x=3; x = 'foo'
	- Array -> no type x = [1, 'two', :three]
	- Hash: w = {'a' => 1, :b=>[2,3]}
      - Methods -> everything passed by reference
      - http://rubular.com for your regex needs
      - regex syntax is simiar to perl
*** Ruby Objects and Methods
    - Even integers and nil are true objects
    - my_str.length => my_str.send(:length)
    - "implicit conversion" is not in the type system but in the
      instance methods! Whoever is the receiver of the method decides
      what to do with it.
    - a.b means -> call method b on object a! ALWAYS
    - << destructively modifies its receivers
*** OOP in Ruby
    - class SavingsAccount < Account #inheritance
    - constructor: initialize
    - @balance -> instance variable
    - need to define getter/setter def balance, def balance= {special syntax}
    - @@bank_name #class (static) variable
    - def self.bank_name {self -> class(static) method name}
    - A class is an instance of Class!
    - attr_accessor :balance {easier to create a simple getter/setters}
    - no multi-inheritance (mix-in!)
    - everything is a method call!
    - most "operators" actually instance methods
    - destructive methods have ! at the end
    - ? after a method call means it returns a boolean and has NO side effects
    - ! after a method call means it modifies the object it is called on OR the parameters passed in. This seems to be inconsistent at best.
*** Ruby Metaprogramming
    - acct.deposit(euro_to_dollars(100))? Nope - lets do it in an
      awesome way
    - acct.deposit(20.euros)! Open Numeric class and define euros
      class Numeric; def euros; self * 1.3 ; end
    - method_missing! -> if you try to do a method that doesn't exist
    - gets "name of the method" and "params"
    - if method_id.to_s == 'euro'
        self.send('euros')
      else 
        super  #default
    - how about more currencies? Use a hash and method_missing to do
      some cool stuff ;)
    - You can "reopen" any calss at any time and add stuff to it!
      
*** Ruby blocks, iterators, functional idioms
    - If you are iterating with an index, you are probably doing it wrong!
    - my_array.each do |elt| ... end
    - each class kind of handles it's own iteration
    - Expression Orientation

* Homework
** Assignment 1
[[http://spark-university.s3.amazonaws.com/berkeley-saas/homework/hw1.pdf][Instructions]]
*** Part 1: fun with strings

#+begin_src ruby  :tangle /Users/asaraf/Documents/github/PublicCode/coursera/saas/part1.rb
  def palindrome?(str)
    x = str.downcase.gsub(/\W/, "")
    return x.reverse == x
  end
#+end_src

#+begin_src ruby  :tangle /Users/asaraf/Documents/github/PublicCode/coursera/saas/part1.rb 
  require 'pp'
  def count_words(str)
     counts = Hash.new(0)
     str.downcase.gsub(/\W/," ").scan(/\b\S+/) {|key| counts[key] = counts[key] + 1 }
    return counts;
  end 
#+end_src

*** Part 2: Rock, Paper, Scissors

#+begin_src ruby :tangle /Users/asaraf/Documents/github/PublicCode/coursera/saas/part2.rb
  require 'pp'
  class WrongNumberOfPlayersError < StandardError ;end
  class NoSuchStrategyError < StandardError ;end
  
  def rps_game_winner(game)
    raise WrongNumberOfPlayersError unless game.length == 2
    game.each {|player, move| raise NoSuchStrategyError unless move =~ /(p|s|r)/i }
    rules = {:s => :r, :p => :s, :r => :p}
    :player1 = 0; :player2=1; :name=0; :strategy = 1
    case game[:player1][:strategy].downcase.to_sym
    when game[:player2][:strategy].downcase.to_sym
        return game[:player1]
    when rules[game[:player2][:strategy].downcase.to_sym]
      return game[:player1]
    else
      return game[:player2]
    end
  end
  
   pp rps_game_winner([ [ "Armando", "S" ], [ "Dave", "P" ] ])  
#+END_SRC ruby

The logic here is to flatten the whole array, and pick four elements
at a time and play the game. We keep doing this iteratively till we
are only left with two elements and thus know the winners!

#+begin_src ruby :tangle /Users/asaraf/Documents/github/PublicCode/coursera/saas/part2.rb
  require 'enumerator'
  def rps_tournament_winner(tournament)
    tournament = tournament.flatten
    while tournament.length > 2 do
      tournament = tournament.each_slice(4).map { |p1,s1,p2,s2| rps_game_winner [[p1,s1],[p2,s2]] }.flatten
    end
    return tournament
  end
   
  # participants = [
  #                 [[ ["Armando", "P"], ["Dave", "S"] ], [["Richard", "R"], ["Michael", "S"]]],
  #                 [[ ["Allen", "S"], ["Omer", "P"] ], [ ["David E.", "R"], ["Richard X.", "P"]]]
  #                ]
  # pp participants
  # pp rps_tournament_winner(participants)
  # pp participants
   
    
#+end_src

*** Part 3
#+begin_src ruby :tangle /Users/asaraf/Documents/github/PublicCode/coursera/saas/part3.rb
def combine_anagrams(words)
  results = Hash.new([]);
  words.each {|word| results[word.downcase.split(//).sort.join] += [word]}
  return results.values;
end

#pp combine_anagrams(['cars', 'for', 'potatoes', 'racs', 'four','scar', 'creams', 'scream']);    
#+end_src

* Web Links
** [[http://beta.saasbook.info/]]

** Emacs Tips
- Copy url at point  (C-c C-x C-w)
- [[http://www.emacswiki.org/emacs/auto-indent-mode.el][EmacsWiki: auto-indent-mode.el]]
** Ruby tips
- [[http://www.ruby-forum.com/topic/76083][Iterating over an array n element at a time]]
- [[http://stackoverflow.com/questions/1230279/how-to-chunk-an-array-in-ruby][How to chunk an array in Ruby - Stack Overflow ]]
- [[http://www.skorks.com/2009/08/how-a-ruby-case-statement-works-and-what-you-can-do-with-it/][How A Ruby Case Statement Works And What You Can Do With It]]
- [[http://stackoverflow.com/questions/5575172/doing-each-in-ruby-how-to-place-a-br-every-n-items][Doing each in Ruby, how to place a br every n items - Stack Overflow]]
- [[http://blog.jayfields.com/2008/03/ruby-inject.html][Jay Fields' Thoughts - Ruby: inject]] - This is essentially a foldl

